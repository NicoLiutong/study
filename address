https://guides.github.com/activities/hello-world/
https://help.github.com/articles/syncing-a-fork/
https://www.zhihu.com/question/20070065
https://developer.android.com/reference/classes.html
checkbox自定義圖片：http://blog.csdn.net/bear_huangzhen/article/details/47044733
修改光標顏色：http://blog.csdn.net/drevy/article/details/7302345
自定義button樣式：http://blog.csdn.net/jack__frost/article/details/51959544；http://www.cnblogs.com/cyanfei/archive/2012/07/27/2612023.html
edittext顯示和隱藏密碼：http://blog.csdn.net/luck_apple/article/details/7075111
assets图片保存到本地sdcard：http://blog.csdn.net/zhang_yanye/article/details/48399593
圖片加載：http://blog.csdn.net/lmj623565791/article/details/39943731/
退出程序：http://blog.csdn.net/u012210186/article/details/41681031
選擇加載、拍照、裁剪並保存：http://blog.csdn.net/xuehuayous/article/details/51324656
uCorp：http://blog.csdn.net/copy_yuan/article/details/51727070；http://blog.csdn.net/u011771755/article/details/50676888；https://my.oschina.net/u/1399599/blog/853374
拍照或相冊選擇：http://www.2cto.com/kf/201610/552599.html
android中自定義view的自定義屬性：http://blog.csdn.net/xmxkf/article/details/51468648
editview獲取焦點：http://www.cnblogs.com/colorful-life/p/4617253.html
editview取消焦點：http://blog.csdn.net/subaohao/article/details/9043895
裁剪图片：https://github.com/oginotihiro/cropview
android7.0調用相機：http://blog.csdn.net/u010873775/article/details/72811581；http://mt.sohu.com/it/d20170425/136282885_659256.shtml；
                    http://blog.csdn.net/u010212089/article/details/53538680；http://blog.csdn.net/u010356768/article/details/70808162
android7.0動態權限：http://blog.csdn.net/u011216417/article/details/69916964：http://blog.csdn.net/lylodyf/article/details/53158091
优雅地实现多个样式的recycler：http://zpayh.xyz/
NavigationView使用：http://blog.csdn.net/u012702547/article/details/51253222
洪洋通用ListView的Adapter和ViewHolder封裝：http://blog.csdn.net/lmj623565791/article/details/38902805/
洪洋通用RecyclerView的Adapter和ViewHolder封裝：http://blog.csdn.net/lmj623565791/article/details/51118836/
RecyclerView實現分組：http://blog.csdn.net/nothingl3/article/details/49049721
RecyclerView長按多選：http://blog.csdn.net/Loften_93663469/article/details/51376703
AndroidStudio使用:http://www.open-open.com/lib/view/open1468121363300.html;http://www.open-open.com/lib/view/open1468121618489.html;
RecyclerVtew滑动监听：http://blog.csdn.net/wyb112233/article/details/50429077
recyclerView下拉刷新、上划加载：https://github.com/llxdaxia/RecyclerView
洪洋实现个性viewPager：http://blog.csdn.net/lmj623565791/article/details/38026503
                      http://blog.csdn.net/lmj623565791/article/details/40411921/
                      http://blog.csdn.net/harvic880925/article/details/38521865
Photoview:http://blog.csdn.net/wu928320442/article/details/43056731
組件的綁定Butter Knife：http://jakewharton.github.io/butterknife/
網絡請求Retrofit：http://square.github.io/retrofit/
線程控制Rx Java：http://gank.io/post/560e15be2dca930e00da1083#toc_13
                http://gank.io/post/56e80c2c677659311bed9841
Android 快速发布开源项目到jcenter:http://blog.csdn.net/lmj623565791/article/details/51148825 
                                http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0623/3097.html
                                http://www.cnblogs.com/qianxudetianxia/p/4322331.html
        
        
服务器：http://www.centoscn.com/
       http://www.centoscn.com/CentOS/help/2017/0831/8932.html
       http://www.jcloud.com/productTrialforPay?uuid=9f8099fb-3cb8-4b04-8194-cab784866a22
       
网易云音乐api：http://blog.csdn.net/qq_21265915/article/details/53000005
         http://blog.csdn.net/alfred_c/article/details/50471171
          

Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + "TestChat"









/**
     * Json方式 查询订单物流轨迹
	 * @throws Exception 
     */
	public String getOrderTracesByJson(String expCode, String expNo) throws Exception{
		String requestData= "{'OrderCode':'','ShipperCode':'" + expCode + "','LogisticCode':'" + expNo + "'}";
		
		Map<String, String> params = new HashMap<String, String>();
		params.put("RequestData", urlEncoder(requestData, "UTF-8"));
		params.put("EBusinessID", EBusinessID);
		params.put("RequestType", "1002");
		String dataSign=encrypt(requestData, AppKey, "UTF-8");
		params.put("DataSign", urlEncoder(dataSign, "UTF-8"));
		params.put("DataType", "2");
		
		String result=sendPost(ReqURL, params);	
		
		//根据公司业务处理返回的信息......
		
		return result;
	}

/**
     * MD5加密
     * @param str 内容       
     * @param charset 编码方式
	 * @throws Exception 
     */
	@SuppressWarnings("unused")
	private String MD5(String str, String charset) throws Exception {
	    MessageDigest md = MessageDigest.getInstance("MD5");
	    md.update(str.getBytes(charset));
	    byte[] result = md.digest();
	    StringBuffer sb = new StringBuffer(32);
	    for (int i = 0; i < result.length; i++) {
	        int val = result[i] & 0xff;
	        if (val <= 0xf) {
	            sb.append("0");
	        }
	        sb.append(Integer.toHexString(val));
	    }
	    return sb.toString().toLowerCase();
	}
	
	/**
     * base64编码
     * @param str 内容       
     * @param charset 编码方式
	 * @throws UnsupportedEncodingException 
     */
	private String base64(String str, String charset) throws UnsupportedEncodingException{
		String encoded = base64Encode(str.getBytes(charset));
		return encoded;    
	}	
	
	@SuppressWarnings("unused")
	private String urlEncoder(String str, String charset) throws UnsupportedEncodingException{
		String result = URLEncoder.encode(str, charset);
		return result;
	}
	
	/**
     * 电商Sign签名生成
     * @param content 内容   
     * @param keyValue Appkey  
     * @param charset 编码方式
	 * @throws UnsupportedEncodingException ,Exception
	 * @return DataSign签名
     */
	@SuppressWarnings("unused")
	private String encrypt (String content, String keyValue, String charset) throws UnsupportedEncodingException, Exception
	{
		if (keyValue != null)
		{
			return base64(MD5(content + keyValue, charset), charset);
		}
		return base64(MD5(content, charset), charset);
	}
	
	
	
	/**
     * 向指定 URL 发送POST方法的请求     
     * @param url 发送请求的 URL    
     * @param params 请求的参数集合     
     * @return 远程资源的响应结果
     */
	@SuppressWarnings("unused")
	private String sendPost(String url, Map<String, String> params) {
	
	
	
	Observable.create(new OnSubscribe<Drawable>() {
    @Override
    public void call(Subscriber<? super String> subscriber) {
        
        subscriber.onNext(String);
        subscriber.onCompleted();
    }
})
.subscribeOn(Schedulers.io()) // 指定 subscribe() 发生在 IO 线程
.observeOn(AndroidSchedulers.mainThread()) // 指定 Subscriber 的回调发生在主线程
.subscribe(new Subscriber<String>() {
    @Override
    public void onNext(String string) {
        
    }

    @Override
    public void onCompleted() {
    }

    @Override
    public void onError(Throwable e) {
        Toast.makeText(activity, "Error!", Toast.LENGTH_SHORT).show();
    }
});
	
	
	
        OutputStreamWriter out = null;
        BufferedReader in = null;        
        StringBuilder result = new StringBuilder(); 
        try {
            URL realUrl = new URL(url);
            HttpURLConnection conn =(HttpURLConnection) realUrl.openConnection();
            // 发送POST请求必须设置如下两行
            conn.setDoOutput(true);
            conn.setDoInput(true);
            // POST方法
            conn.setRequestMethod("POST");
            // 设置通用的请求属性
            conn.setRequestProperty("accept", "*/*");
            conn.setRequestProperty("connection", "Keep-Alive");
            conn.setRequestProperty("user-agent",
                    "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            conn.connect();
            // 获取URLConnection对象对应的输出流
            out = new OutputStreamWriter(conn.getOutputStream(), "UTF-8");
            // 发送请求参数            
            if (params != null) {
		          StringBuilder param = new StringBuilder(); 
		          for (Map.Entry<String, String> entry : params.entrySet()) {
		        	  if(param.length()>0){
		        		  param.append("&");
		        	  }	        	  
		        	  param.append(entry.getKey());
		        	  param.append("=");
		        	  param.append(entry.getValue());		        	  
		        	  //System.out.println(entry.getKey()+":"+entry.getValue());
		          }
		          //System.out.println("param:"+param.toString());
		          out.write(param.toString());
            }
            // flush输出流的缓冲
            out.flush();
            // 定义BufferedReader输入流来读取URL的响应
            in = new BufferedReader(
                    new InputStreamReader(conn.getInputStream(), "UTF-8"));
            String line;
            while ((line = in.readLine()) != null) {
                result.append(line);
            }
        } catch (Exception e) {            
            e.printStackTrace();
        }
        //使用finally块来关闭输出流、输入流
        finally{
            try{
                if(out!=null){
                    out.close();
                }
                if(in!=null){
                    in.close();
                }
            }
            catch(IOException ex){
                ex.printStackTrace();
            }
        }
        return result.toString();
    }
	
	
	
	
	
	
	private static char[] base64EncodeChars = new char[] { 
        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 
        'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 
        'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 
        'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 
        'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 
        'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 
        'w', 'x', 'y', 'z', '0', '1', '2', '3', 
        '4', '5', '6', '7', '8', '9', '+', '/' }; 
	
    public static String base64Encode(byte[] data) { 
        StringBuffer sb = new StringBuffer(); 
        int len = data.length; 
        int i = 0; 
        int b1, b2, b3; 
        while (i < len) { 
            b1 = data[i++] & 0xff; 
            if (i == len) 
            { 
                sb.append(base64EncodeChars[b1 >>> 2]); 
                sb.append(base64EncodeChars[(b1 & 0x3) << 4]); 
                sb.append("=="); 
                break; 
            } 
            b2 = data[i++] & 0xff; 
            if (i == len) 
            { 
                sb.append(base64EncodeChars[b1 >>> 2]); 
                sb.append(base64EncodeChars[((b1 & 0x03) << 4) | ((b2 & 0xf0) >>> 4)]); 
                sb.append(base64EncodeChars[(b2 & 0x0f) << 2]); 
                sb.append("="); 
                break; 
            } 
            b3 = data[i++] & 0xff; 
            sb.append(base64EncodeChars[b1 >>> 2]); 
            sb.append(base64EncodeChars[((b1 & 0x03) << 4) | ((b2 & 0xf0) >>> 4)]); 
            sb.append(base64EncodeChars[((b2 & 0x0f) << 2) | ((b3 & 0xc0) >>> 6)]); 
            sb.append(base64EncodeChars[b3 & 0x3f]); 
        } 
        return sb.toString(); 
    }
